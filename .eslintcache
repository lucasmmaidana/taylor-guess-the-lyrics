[{"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\App.js":"1","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\index.js":"2","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\reportWebVitals.js":"3","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\Context.js":"4","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\pages\\Home.js":"5","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\AlbumCard.js":"6","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\pages\\Quizz.js":"7","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\pages\\Over.js":"8","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Lyrics.js":"9","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Option.js":"10","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\AlbumChip.js":"11","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Round.js":"12","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Exit.js":"13","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\LyricsLoader.js":"14","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\AlbumsLoader.js":"15"},{"size":647,"mtime":1610988319172,"results":"16","hashOfConfig":"17"},{"size":604,"mtime":1610988535153,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1610216252472,"results":"19","hashOfConfig":"17"},{"size":5722,"mtime":1611168127232,"results":"20","hashOfConfig":"17"},{"size":1158,"mtime":1611167727718,"results":"21","hashOfConfig":"17"},{"size":733,"mtime":1611168204177,"results":"22","hashOfConfig":"17"},{"size":2646,"mtime":1611164422123,"results":"23","hashOfConfig":"17"},{"size":912,"mtime":1611099446365,"results":"24","hashOfConfig":"17"},{"size":573,"mtime":1611168299145,"results":"25","hashOfConfig":"17"},{"size":1705,"mtime":1611164180148,"results":"26","hashOfConfig":"17"},{"size":503,"mtime":1611168242824,"results":"27","hashOfConfig":"17"},{"size":265,"mtime":1610992287333,"results":"28","hashOfConfig":"17"},{"size":1737,"mtime":1610991424853,"results":"29","hashOfConfig":"17"},{"size":293,"mtime":1611078887135,"results":"30","hashOfConfig":"17"},{"size":255,"mtime":1611168163112,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"19lxqvi",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\App.js",["69","70","71","72","73","74","75"],"import React, { useState, useEffect, useContext } from \"react\"\r\nimport \"./App.css\"\r\n\r\nimport Home from \"./pages/Home\"\r\nimport Quizz from \"./pages/Quizz\"\r\nimport Over from \"./pages/Over\"\r\n\r\nimport { Context } from \"./Context\"\r\n\r\nfunction App() {\r\n  const { gameState, albums, setAlbums } = useContext(Context)\r\n\r\n  const [isGameStarted, setIsGameStarted] = useState(false)\r\n  const [selectedAlbum, setSelectedAlbum] = useState(null)\r\n\r\n  switch (gameState) {\r\n    case \"Home\":\r\n      return <Home />\r\n    case \"Quizz\":\r\n      return <Quizz />\r\n    case \"Over\":\r\n      return <Over />\r\n    default:\r\n      return null\r\n  }\r\n}\r\n\r\nexport default App\r\n",["76","77"],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\index.js",[],["78","79"],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\reportWebVitals.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\Context.js",["80","81","82","83","84"],"import React, { useState, useEffect } from \"react\"\r\n\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider({ children }) {\r\n  const [gameState, setGameState] = useState(\"Home\")\r\n\r\n  const [albums, setAlbums] = useState([])\r\n  const [isAlbumsLoading, setIsAlbumsLoading] = useState(true)\r\n  const [selectedAlbum, setSelectedAlbum] = useState({})\r\n\r\n  const [songs, setSongs] = useState([])\r\n  const [options, setOptions] = useState([])\r\n  const [lyrics, setLyrics] = useState(\"\")\r\n\r\n  const [roundCount, setRoundCount] = useState(1)\r\n  const [correctCount, setCorrectCount] = useState(0)\r\n\r\n  const [retryRandomOptions, setRetryRandomOptions] = useState(0)\r\n  const [isLyricsLoading, setIsLyricsLoading] = useState(true)\r\n\r\n  const ARTIST = \"Taylor Swift\"\r\n  const artistFormated = ARTIST.split(\" \").join(\"_\")\r\n\r\n  const ROUNDS = 5\r\n\r\n  function startGame(album) {\r\n    setGameState(\"Quizz\")\r\n    setSelectedAlbum({\r\n      id: album.idAlbum,\r\n      name: album.strAlbum,\r\n      imgUrl: album.strAlbumThumb,\r\n    })\r\n  }\r\n\r\n  /* Get albums when mounted */\r\n  useEffect(() => {\r\n    const url = `https://www.theaudiodb.com/api/v1/json/1/searchalbum.php?s=${artistFormated}`\r\n    console.log(url)\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setAlbums(data.album)\r\n        setIsAlbumsLoading(false)\r\n      })\r\n  }, [])\r\n\r\n  /* Get songs when an album is selected */\r\n  useEffect(() => {\r\n    selectedAlbum.id &&\r\n      fetch(\r\n        `https://theaudiodb.com/api/v1/json/1/track.php?m=${selectedAlbum.id}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => setSongs(data.track))\r\n  }, [selectedAlbum])\r\n\r\n  /* Get random options when songs are fetched */\r\n  useEffect(() => {\r\n    console.log(\"starts randomOptions \", songs)\r\n    setIsLyricsLoading(true)\r\n\r\n    if (songs.length > 0) {\r\n      var randoms = []\r\n      while (randoms.length < 3) {\r\n        var r = Math.floor(Math.random() * songs.length)\r\n        if (randoms.indexOf(r) === -1) randoms.push(r)\r\n      }\r\n\r\n      console.log(\"RANDOMS \", randoms)\r\n\r\n      const initialOptions = [\r\n        { song: songs[randoms[0]].strTrack, correct: true },\r\n        { song: songs[randoms[1]].strTrack, correct: false },\r\n        { song: songs[randoms[2]].strTrack, correct: false },\r\n      ]\r\n\r\n      let shuffledOptions = initialOptions\r\n      for (let i = shuffledOptions.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1))\r\n        ;[shuffledOptions[i], shuffledOptions[j]] = [\r\n          shuffledOptions[j],\r\n          shuffledOptions[i],\r\n        ]\r\n      }\r\n\r\n      setOptions(shuffledOptions)\r\n\r\n      console.log(\r\n        \"options \",\r\n        options,\r\n        \"la correcta \",\r\n        options.filter((opt) => opt.correct)\r\n      )\r\n    }\r\n  }, [songs, roundCount, retryRandomOptions])\r\n\r\n  /* Get random lyrics from the correct song */\r\n  useEffect(() => {\r\n    if (options.length > 0) {\r\n      setIsLyricsLoading(true)\r\n      const fetchLyrics = async () => {\r\n        const correctSong = options\r\n          .filter((opt) => opt.correct)[0]\r\n          .song.split(\" \")\r\n          .join(\"_\")\r\n        console.log(\"correcta\", correctSong)\r\n        const url = `https://api.lyrics.ovh/v1/${artistFormated}/${correctSong}`\r\n        try {\r\n          const res = await fetch(url)\r\n          const data = await res.json()\r\n          let lyricsPhrases = data.lyrics\r\n          if (lyricsPhrases == \"\") {\r\n            setRetryRandomOptions((prev) => prev + 1)\r\n            console.log(\"LYRICS VACIAS, REINTENTAR CON NUEVAS OPCIONES\")\r\n          } else {\r\n            setIsLyricsLoading(false)\r\n            lyricsPhrases = lyricsPhrases\r\n              .split(\"\\n\")\r\n              .filter((line) => line !== \"\")\r\n            console.log(lyricsPhrases)\r\n            const randomLine = Math.floor(\r\n              Math.random() * (lyricsPhrases.length - 1)\r\n            )\r\n            console.log(\r\n              \"line \",\r\n              randomLine,\r\n              \" line1 \",\r\n              lyricsPhrases[randomLine],\r\n              \" line2 \",\r\n              lyricsPhrases[randomLine + 1]\r\n            )\r\n            setLyrics([\r\n              lyricsPhrases[randomLine],\r\n              lyricsPhrases[randomLine + 1],\r\n            ])\r\n            console.log(\"laslyric\", lyrics)\r\n          }\r\n        } catch (err) {\r\n          console.error(err)\r\n          setRetryRandomOptions((prev) => prev + 1)\r\n        }\r\n      }\r\n      fetchLyrics()\r\n    }\r\n  }, [options])\r\n\r\n  {\r\n    /* function correctAnswer() {\r\n    alert(\"Yay! Correct\")\r\n    nextRound()\r\n    setCorrectCount((prev) => prev + 1)\r\n  }\r\n  function incorrectAnswer() {\r\n    alert(\"Incorrect :(\")\r\n    nextRound()\r\n  } */\r\n  }\r\n\r\n  function nextRound() {\r\n    roundCount < ROUNDS ? setRoundCount((prev) => prev + 1) : gameOver()\r\n    console.log(roundCount)\r\n  }\r\n  function gameOver() {\r\n    setGameState(\"Over\")\r\n  }\r\n\r\n  function restartGame() {\r\n    setGameState(\"Home\")\r\n    setSelectedAlbum({})\r\n    setSongs([])\r\n    setOptions([])\r\n    setLyrics(\"\")\r\n    setRoundCount(1)\r\n    setCorrectCount(0)\r\n  }\r\n\r\n  return (\r\n    <Context.Provider\r\n      value={{\r\n        ARTIST,\r\n        startGame,\r\n        gameState,\r\n        setGameState,\r\n        albums,\r\n        setAlbums,\r\n        isAlbumsLoading,\r\n        selectedAlbum,\r\n        songs,\r\n        setSongs,\r\n        options,\r\n        setOptions,\r\n        lyrics,\r\n        setLyrics,\r\n        restartGame,\r\n        nextRound,\r\n        roundCount,\r\n        ROUNDS,\r\n        correctCount,\r\n        setCorrectCount,\r\n        gameOver,\r\n        isLyricsLoading,\r\n      }}\r\n    >\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport { ContextProvider, Context }\r\n","C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\pages\\Home.js",["85"],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\AlbumCard.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\pages\\Quizz.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\pages\\Over.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Lyrics.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Option.js",["86"],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\AlbumChip.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Round.js",["87"],"import React, { useContext } from \"react\"\r\n\r\nfunction Round({ actual, total }) {\r\n  return (\r\n    <div class=\"round-counter\">\r\n      <span className=\"actual\">{actual}</span>\r\n      <span className=\"total\">{total}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Round\r\n",["88","89"],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\Exit.js",[],["90","91"],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\LyricsLoader.js",[],"C:\\Users\\Usuario\\Documents\\Projects\\Taylor Guess the song\\taylor-guess-the-song\\src\\components\\AlbumsLoader.js",[],{"ruleId":"92","severity":1,"message":"93","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"96","line":11,"column":22,"nodeType":"94","messageId":"95","endLine":11,"endColumn":28},{"ruleId":"92","severity":1,"message":"97","line":11,"column":30,"nodeType":"94","messageId":"95","endLine":11,"endColumn":39},{"ruleId":"92","severity":1,"message":"98","line":13,"column":10,"nodeType":"94","messageId":"95","endLine":13,"endColumn":23},{"ruleId":"92","severity":1,"message":"99","line":13,"column":25,"nodeType":"94","messageId":"95","endLine":13,"endColumn":41},{"ruleId":"92","severity":1,"message":"100","line":14,"column":10,"nodeType":"94","messageId":"95","endLine":14,"endColumn":23},{"ruleId":"92","severity":1,"message":"101","line":14,"column":25,"nodeType":"94","messageId":"95","endLine":14,"endColumn":41},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"102","replacedBy":"106"},{"ruleId":"104","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":46,"column":6,"nodeType":"110","endLine":46,"endColumn":8,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"112","line":96,"column":6,"nodeType":"110","endLine":96,"endColumn":45,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":113,"column":29,"nodeType":"116","messageId":"117","endLine":113,"endColumn":31},{"ruleId":"108","severity":1,"message":"118","line":146,"column":6,"nodeType":"110","endLine":146,"endColumn":15,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":148,"column":3,"nodeType":"122","messageId":"123","endLine":158,"endColumn":4},{"ruleId":"92","severity":1,"message":"97","line":9,"column":27,"nodeType":"94","messageId":"95","endLine":9,"endColumn":36},{"ruleId":"114","severity":1,"message":"115","line":15,"column":21,"nodeType":"116","messageId":"117","endLine":15,"endColumn":23},{"ruleId":"92","severity":1,"message":"124","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":27},{"ruleId":"102","replacedBy":"125"},{"ruleId":"104","replacedBy":"126"},{"ruleId":"102","replacedBy":"127"},{"ruleId":"104","replacedBy":"128"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'albums' is assigned a value but never used.","'setAlbums' is assigned a value but never used.","'isGameStarted' is assigned a value but never used.","'setIsGameStarted' is assigned a value but never used.","'selectedAlbum' is assigned a value but never used.","'setSelectedAlbum' is assigned a value but never used.","no-native-reassign",["129"],"no-negated-in-lhs",["130"],["129"],["130"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'artistFormated'. Either include it or remove the dependency array.","ArrayExpression",["131"],"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.",["132"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'artistFormated' and 'lyrics'. Either include them or remove the dependency array.",["133"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useContext' is defined but never used.",["129"],["130"],["129"],["130"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [artistFormated]",{"range":"140","text":"141"},"Update the dependencies array to be: [songs, roundCount, retryRandomOptions, options]",{"range":"142","text":"143"},"Update the dependencies array to be: [artistFormated, lyrics, options]",{"range":"144","text":"145"},[1363,1365],"[artistFormated]",[2800,2839],"[songs, roundCount, retryRandomOptions, options]",[4495,4504],"[artistFormated, lyrics, options]"]